// Code generated by protoc-gen-go.
// source: structs.proto
// DO NOT EDIT!

/*
Package hexaring is a generated protocol buffer package.

It is generated from these files:
	structs.proto

It has these top-level messages:
	Location
	LookupRequest
	LookupResponse
*/
package hexaring

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import chord "github.com/hexablock/go-chord"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Location struct {
	ID       []byte       `protobuf:"bytes,1,opt,name=ID,json=iD,proto3" json:"ID,omitempty"`
	Priority int32        `protobuf:"varint,2,opt,name=Priority,json=priority" json:"Priority,omitempty"`
	Vnode    *chord.Vnode `protobuf:"bytes,3,opt,name=Vnode,json=vnode" json:"Vnode,omitempty"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Location) GetID() []byte {
	if m != nil {
		return m.ID
	}
	return nil
}

func (m *Location) GetPriority() int32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *Location) GetVnode() *chord.Vnode {
	if m != nil {
		return m.Vnode
	}
	return nil
}

type LookupRequest struct {
	Key []byte `protobuf:"bytes,1,opt,name=Key,json=key,proto3" json:"Key,omitempty"`
	N   int32  `protobuf:"varint,2,opt,name=N,json=n" json:"N,omitempty"`
}

func (m *LookupRequest) Reset()                    { *m = LookupRequest{} }
func (m *LookupRequest) String() string            { return proto.CompactTextString(m) }
func (*LookupRequest) ProtoMessage()               {}
func (*LookupRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LookupRequest) GetKey() []byte {
	if m != nil {
		return m.Key
	}
	return nil
}

func (m *LookupRequest) GetN() int32 {
	if m != nil {
		return m.N
	}
	return 0
}

type LookupResponse struct {
	Locations []*Location    `protobuf:"bytes,1,rep,name=Locations,json=locations" json:"Locations,omitempty"`
	Vnodes    []*chord.Vnode `protobuf:"bytes,2,rep,name=Vnodes,json=vnodes" json:"Vnodes,omitempty"`
}

func (m *LookupResponse) Reset()                    { *m = LookupResponse{} }
func (m *LookupResponse) String() string            { return proto.CompactTextString(m) }
func (*LookupResponse) ProtoMessage()               {}
func (*LookupResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LookupResponse) GetLocations() []*Location {
	if m != nil {
		return m.Locations
	}
	return nil
}

func (m *LookupResponse) GetVnodes() []*chord.Vnode {
	if m != nil {
		return m.Vnodes
	}
	return nil
}

func init() {
	proto.RegisterType((*Location)(nil), "hexaring.Location")
	proto.RegisterType((*LookupRequest)(nil), "hexaring.LookupRequest")
	proto.RegisterType((*LookupResponse)(nil), "hexaring.LookupResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for LookupRPC service

type LookupRPCClient interface {
	LookupRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	LookupHashRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	LookupReplicatedRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	LookupReplicatedHashRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
}

type lookupRPCClient struct {
	cc *grpc.ClientConn
}

func NewLookupRPCClient(cc *grpc.ClientConn) LookupRPCClient {
	return &lookupRPCClient{cc}
}

func (c *lookupRPCClient) LookupRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/hexaring.LookupRPC/LookupRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupRPCClient) LookupHashRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/hexaring.LookupRPC/LookupHashRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupRPCClient) LookupReplicatedRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/hexaring.LookupRPC/LookupReplicatedRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lookupRPCClient) LookupReplicatedHashRPC(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := grpc.Invoke(ctx, "/hexaring.LookupRPC/LookupReplicatedHashRPC", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for LookupRPC service

type LookupRPCServer interface {
	LookupRPC(context.Context, *LookupRequest) (*LookupResponse, error)
	LookupHashRPC(context.Context, *LookupRequest) (*LookupResponse, error)
	LookupReplicatedRPC(context.Context, *LookupRequest) (*LookupResponse, error)
	LookupReplicatedHashRPC(context.Context, *LookupRequest) (*LookupResponse, error)
}

func RegisterLookupRPCServer(s *grpc.Server, srv LookupRPCServer) {
	s.RegisterService(&_LookupRPC_serviceDesc, srv)
}

func _LookupRPC_LookupRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupRPCServer).LookupRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexaring.LookupRPC/LookupRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupRPCServer).LookupRPC(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupRPC_LookupHashRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupRPCServer).LookupHashRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexaring.LookupRPC/LookupHashRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupRPCServer).LookupHashRPC(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupRPC_LookupReplicatedRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupRPCServer).LookupReplicatedRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexaring.LookupRPC/LookupReplicatedRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupRPCServer).LookupReplicatedRPC(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _LookupRPC_LookupReplicatedHashRPC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LookupRPCServer).LookupReplicatedHashRPC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hexaring.LookupRPC/LookupReplicatedHashRPC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LookupRPCServer).LookupReplicatedHashRPC(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LookupRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hexaring.LookupRPC",
	HandlerType: (*LookupRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LookupRPC",
			Handler:    _LookupRPC_LookupRPC_Handler,
		},
		{
			MethodName: "LookupHashRPC",
			Handler:    _LookupRPC_LookupHashRPC_Handler,
		},
		{
			MethodName: "LookupReplicatedRPC",
			Handler:    _LookupRPC_LookupReplicatedRPC_Handler,
		},
		{
			MethodName: "LookupReplicatedHashRPC",
			Handler:    _LookupRPC_LookupReplicatedHashRPC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "structs.proto",
}

func init() { proto.RegisterFile("structs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 310 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0x4f, 0x4b, 0xc3, 0x30,
	0x14, 0xc0, 0x4d, 0xcb, 0x46, 0xf7, 0xf6, 0x07, 0x89, 0x87, 0x95, 0x9d, 0x4a, 0x11, 0xec, 0xc5,
	0x54, 0xe6, 0x17, 0x10, 0xdc, 0xc1, 0x3f, 0x63, 0x8c, 0x1e, 0x3c, 0x78, 0xeb, 0xb2, 0xb0, 0x86,
	0xcd, 0xbc, 0x9a, 0xa4, 0xe2, 0x3e, 0x95, 0x5f, 0x51, 0x96, 0x2d, 0x30, 0xf5, 0x36, 0x4f, 0xe1,
	0xfd, 0xfb, 0xbd, 0xdf, 0x83, 0x40, 0xdf, 0x58, 0xdd, 0x70, 0x6b, 0x58, 0xad, 0xd1, 0x22, 0x8d,
	0x2a, 0xf1, 0x59, 0x6a, 0xa9, 0x56, 0xa3, 0xab, 0x95, 0xb4, 0x55, 0xb3, 0x60, 0x1c, 0xdf, 0xf2,
	0x5d, 0x72, 0xb1, 0x41, 0xbe, 0xce, 0x57, 0x78, 0xcd, 0x2b, 0xd4, 0xcb, 0x5c, 0x09, 0xbb, 0x1f,
	0x49, 0x5f, 0x21, 0x9a, 0x22, 0x2f, 0xad, 0x44, 0x45, 0x07, 0x10, 0x3c, 0x4e, 0x62, 0x92, 0x90,
	0xac, 0x57, 0x04, 0x72, 0x42, 0x47, 0x10, 0xcd, 0xb5, 0x44, 0x2d, 0xed, 0x36, 0x0e, 0x12, 0x92,
	0xb5, 0x8a, 0xa8, 0x3e, 0xc4, 0x34, 0x85, 0xd6, 0x8b, 0xc2, 0xa5, 0x88, 0xc3, 0x84, 0x64, 0xdd,
	0x71, 0x8f, 0x39, 0x30, 0x73, 0xb9, 0xa2, 0xf5, 0xb1, 0x7b, 0xd2, 0x1c, 0xfa, 0x53, 0xc4, 0x75,
	0x53, 0x17, 0xe2, 0xbd, 0x11, 0xc6, 0xd2, 0x73, 0x08, 0x9f, 0xc5, 0xf6, 0xb0, 0x21, 0x5c, 0x8b,
	0x2d, 0xed, 0x01, 0x99, 0x1d, 0xd8, 0x44, 0xa5, 0x15, 0x0c, 0xfc, 0x80, 0xa9, 0x51, 0x19, 0x41,
	0x6f, 0xa0, 0xe3, 0xf5, 0x4c, 0x4c, 0x92, 0x30, 0xeb, 0x8e, 0x29, 0xf3, 0x57, 0x32, 0x5f, 0x2a,
	0x3a, 0x1b, 0xdf, 0x44, 0x2f, 0xa1, 0xed, 0x24, 0x4c, 0x1c, 0xb8, 0xf6, 0x9f, 0x66, 0x6d, 0x67,
	0x66, 0xc6, 0x5f, 0xc1, 0x0e, 0xec, 0x56, 0xcd, 0xef, 0xe9, 0xdd, 0x71, 0x30, 0x3c, 0xe6, 0x1f,
	0xd9, 0x8f, 0xe2, 0xbf, 0x85, 0xbd, 0x65, 0x7a, 0x46, 0x27, 0xfe, 0xd4, 0x87, 0xd2, 0x54, 0x27,
	0x53, 0x9e, 0xe0, 0xc2, 0xe7, 0xea, 0x8d, 0xe4, 0xa5, 0x15, 0xcb, 0x93, 0x59, 0x33, 0x18, 0xfe,
	0x66, 0xfd, 0xc7, 0x6d, 0xd1, 0x76, 0xff, 0xe5, 0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xc0, 0x05,
	0xca, 0xa2, 0x73, 0x02, 0x00, 0x00,
}
